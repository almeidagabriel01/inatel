i = 0; //1s Atribuição
while (i<n) //3.(n+1)  O while vai ser executado n+1 vezes. Vai contar o acesso à memória 2 vezes e a comparação
{
  y = 2*i; //3n  Acesso à memória do i, multiplicação e atribuição
  x = y*z; //4n  2 acessos à memória do y e z, multiplicação e atribuição
  i++; //3n  Acesso à memória, soma e atribuição
}

T(n) = 1 + 3.(n+1) + 3n + 4n + 3n
T(n) = 1 + 3n + 3 + 10n
T(n) = 13n + 4


for (i=0; i<n; i++) //4 + 6n  Atribuição, 2 acessos à memória e comparação, acesso à memória, soma e atribuição
{
  y = 2*i; //3n  Acesso à memória do i, multiplicação e atribuição
  x = y*z; //4n 2  Acessos à memória do y e z, multiplicação e atribuição
}

OBS:
na primeira vez do for, ele vai executar somente i = 0 e i<n
da segunda vez em diante, ele vai executar i<n e i++

Exemplo:
para n=3
i = 0 e 0<3 // Custo de 4s
i++ e 1<3 // Custo de 6s
i++ e 2<3 // Custo de 6s

T(n) = 4 + 6n + 3n + 4n
T(n) = 13n + 4